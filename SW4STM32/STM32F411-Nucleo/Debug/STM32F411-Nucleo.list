
STM32F411-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c08  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000da0  08000da0  00010da0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000db8  08000db8  00010db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000dbc  08000dbc  00010dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000002c  20000000  08000dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000064  2000002c  08000dec  0002002c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000090  08000dec  00020090  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000059c1  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001062  00000000  00000000  00025a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00002216  00000000  00000000  00026a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000298  00000000  00000000  00028c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000828  00000000  00000000  00028f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000fcb0  00000000  00000000  00029758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00004159  00000000  00000000  00039408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0005b14e  00000000  00000000  0003d561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  000986af  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000005dc  00000000  00000000  00098704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000d88 	.word	0x08000d88

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	08000d88 	.word	0x08000d88

080001d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	490f      	ldr	r1, [pc, #60]	; (8000218 <SystemInit+0x40>)
 80001da:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80001de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e6:	4b0d      	ldr	r3, [pc, #52]	; (800021c <SystemInit+0x44>)
 80001e8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001ea:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80001ec:	f042 0201 	orr.w	r2, r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80001f2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80001fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80001fe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <SystemInit+0x48>)
 8000202:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000204:	681a      	ldr	r2, [r3, #0]
 8000206:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800020a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800020c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800020e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000212:	608b      	str	r3, [r1, #8]
#endif
}
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	e000ed00 	.word	0xe000ed00
 800021c:	40023800 	.word	0x40023800
 8000220:	24003010 	.word	0x24003010

08000224 <LL_I2C_DeInit>:
  ErrorStatus status = SUCCESS;

  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));

  if (I2Cx == I2C1)
 8000224:	4b15      	ldr	r3, [pc, #84]	; (800027c <LL_I2C_DeInit+0x58>)
 8000226:	4298      	cmp	r0, r3
 8000228:	d10b      	bne.n	8000242 <LL_I2C_DeInit+0x1e>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
  SET_BIT(RCC->APB1RSTR, Periphs);
 800022a:	f503 33f2 	add.w	r3, r3, #123904	; 0x1e400
 800022e:	6a1a      	ldr	r2, [r3, #32]
 8000230:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000234:	621a      	str	r2, [r3, #32]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 8000236:	6a1a      	ldr	r2, [r3, #32]
 8000238:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800023c:	621a      	str	r2, [r3, #32]
  ErrorStatus status = SUCCESS;
 800023e:	2000      	movs	r0, #0
}
 8000240:	4770      	bx	lr
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C1);

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C1);
  }
  else if (I2Cx == I2C2)
 8000242:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <LL_I2C_DeInit+0x5c>)
 8000244:	4298      	cmp	r0, r3
 8000246:	d109      	bne.n	800025c <LL_I2C_DeInit+0x38>
  SET_BIT(RCC->APB1RSTR, Periphs);
 8000248:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
 800024c:	6a1a      	ldr	r2, [r3, #32]
 800024e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000252:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 8000254:	6a1a      	ldr	r2, [r3, #32]
 8000256:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800025a:	e7ef      	b.n	800023c <LL_I2C_DeInit+0x18>
    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C2);

  }
#if defined(I2C3)
  else if (I2Cx == I2C3)
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <LL_I2C_DeInit+0x60>)
 800025e:	4298      	cmp	r0, r3
 8000260:	d109      	bne.n	8000276 <LL_I2C_DeInit+0x52>
  SET_BIT(RCC->APB1RSTR, Periphs);
 8000262:	f503 33ee 	add.w	r3, r3, #121856	; 0x1dc00
 8000266:	6a1a      	ldr	r2, [r3, #32]
 8000268:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800026c:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 800026e:	6a1a      	ldr	r2, [r3, #32]
 8000270:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000274:	e7e2      	b.n	800023c <LL_I2C_DeInit+0x18>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C3);
  }
#endif
  else
  {
    status = ERROR;
 8000276:	2001      	movs	r0, #1
  }

  return status;
}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40005400 	.word	0x40005400
 8000280:	40005800 	.word	0x40005800
 8000284:	40005c00 	.word	0x40005c00

08000288 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800028a:	6803      	ldr	r3, [r0, #0]
{
  uint32_t freqrange = 0x0U;
  uint32_t clockconfig = 0x0U;

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800028c:	4f37      	ldr	r7, [pc, #220]	; (800036c <LL_I2C_Init+0xe4>)
 800028e:	b085      	sub	sp, #20
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000290:	f023 0301 	bic.w	r3, r3, #1
 8000294:	4604      	mov	r4, r0
 8000296:	460d      	mov	r5, r1
 8000298:	6003      	str	r3, [r0, #0]

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800029a:	4668      	mov	r0, sp
 800029c:	f000 f8c6 	bl	800042c <LL_RCC_GetSystemClocksFreq>
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 80002a0:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
 80002a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80002a6:	430b      	orrs	r3, r1
 80002a8:	f022 021f 	bic.w	r2, r2, #31
 80002ac:	4313      	orrs	r3, r2
 80002ae:	6263      	str	r3, [r4, #36]	; 0x24

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80002b0:	6861      	ldr	r1, [r4, #4]
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80002b2:	9b02      	ldr	r3, [sp, #8]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80002b4:	fbb3 f7f7 	udiv	r7, r3, r7
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80002b8:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80002bc:	e9d5 2601 	ldrd	r2, r6, [r5, #4]
 80002c0:	4339      	orrs	r1, r7
 80002c2:	6061      	str	r1, [r4, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80002c4:	492a      	ldr	r1, [pc, #168]	; (8000370 <LL_I2C_Init+0xe8>)
 80002c6:	6a20      	ldr	r0, [r4, #32]
 80002c8:	428a      	cmp	r2, r1
 80002ca:	468c      	mov	ip, r1
 80002cc:	bf85      	ittet	hi
 80002ce:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80002d2:	4379      	mulhi	r1, r7
 80002d4:	1c79      	addls	r1, r7, #1
 80002d6:	f44f 777a 	movhi.w	r7, #1000	; 0x3e8
 80002da:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80002de:	bf84      	itt	hi
 80002e0:	fbb1 f1f7 	udivhi	r1, r1, r7
 80002e4:	3101      	addhi	r1, #1
 80002e6:	4301      	orrs	r1, r0

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80002e8:	4562      	cmp	r2, ip
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80002ea:	6221      	str	r1, [r4, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80002ec:	d934      	bls.n	8000358 <LL_I2C_Init+0xd0>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80002ee:	bb6e      	cbnz	r6, 800034c <LL_I2C_Init+0xc4>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80002f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80002f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80002f8:	f3c3 020b 	ubfx	r2, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80002fc:	b34a      	cbz	r2, 8000352 <LL_I2C_Init+0xca>
 80002fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000302:	4333      	orrs	r3, r6
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8000304:	69e2      	ldr	r2, [r4, #28]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8000306:	69e9      	ldr	r1, [r5, #28]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8000308:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 800030c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000310:	4313      	orrs	r3, r2
 8000312:	61e3      	str	r3, [r4, #28]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8000314:	68a2      	ldr	r2, [r4, #8]
 8000316:	696b      	ldr	r3, [r5, #20]
 8000318:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 800031c:	430b      	orrs	r3, r1
 800031e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000322:	4313      	orrs	r3, r2
 8000324:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8000326:	6823      	ldr	r3, [r4, #0]
 8000328:	682a      	ldr	r2, [r5, #0]
 800032a:	f023 031a 	bic.w	r3, r3, #26
 800032e:	4313      	orrs	r3, r2
 8000330:	6023      	str	r3, [r4, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000332:	6823      	ldr	r3, [r4, #0]
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8000334:	69aa      	ldr	r2, [r5, #24]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800033c:	6823      	ldr	r3, [r4, #0]
 800033e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000342:	4313      	orrs	r3, r2
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);

  return SUCCESS;
}
 8000344:	2000      	movs	r0, #0
 8000346:	6023      	str	r3, [r4, #0]
 8000348:	b005      	add	sp, #20
 800034a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800034c:	2119      	movs	r1, #25
 800034e:	434a      	muls	r2, r1
 8000350:	e7d0      	b.n	80002f4 <LL_I2C_Init+0x6c>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8000352:	f248 0301 	movw	r3, #32769	; 0x8001
 8000356:	e7d4      	b.n	8000302 <LL_I2C_Init+0x7a>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8000358:	0052      	lsls	r2, r2, #1
 800035a:	fbb3 f3f2 	udiv	r3, r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800035e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000362:	4213      	tst	r3, r2
 8000364:	bf08      	it	eq
 8000366:	2304      	moveq	r3, #4
 8000368:	e7cc      	b.n	8000304 <LL_I2C_Init+0x7c>
 800036a:	bf00      	nop
 800036c:	000f4240 	.word	0x000f4240
 8000370:	000186a0 	.word	0x000186a0

08000374 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <RCC_GetHCLKClockFreq+0x10>)
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <RCC_GetHCLKClockFreq+0x14>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800037e:	5cd3      	ldrb	r3, [r2, r3]
}
 8000380:	40d8      	lsrs	r0, r3
 8000382:	4770      	bx	lr
 8000384:	40023800 	.word	0x40023800
 8000388:	08000da0 	.word	0x08000da0

0800038c <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800038c:	4b03      	ldr	r3, [pc, #12]	; (800039c <RCC_GetPCLK1ClockFreq+0x10>)
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800038e:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <RCC_GetPCLK1ClockFreq+0x14>)
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000396:	5cd3      	ldrb	r3, [r2, r3]
}
 8000398:	40d8      	lsrs	r0, r3
 800039a:	4770      	bx	lr
 800039c:	40023800 	.word	0x40023800
 80003a0:	08000db0 	.word	0x08000db0

080003a4 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <RCC_GetPCLK2ClockFreq+0x10>)
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80003a6:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <RCC_GetPCLK2ClockFreq+0x14>)
 80003a8:	689b      	ldr	r3, [r3, #8]
 80003aa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80003ae:	5cd3      	ldrb	r3, [r2, r3]
}
 80003b0:	40d8      	lsrs	r0, r3
 80003b2:	4770      	bx	lr
 80003b4:	40023800 	.word	0x40023800
 80003b8:	08000db0 	.word	0x08000db0

080003bc <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80003bc:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
      break;

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80003be:	490f      	ldr	r1, [pc, #60]	; (80003fc <RCC_PLL_GetFreqDomain_SYS+0x40>)
 80003c0:	685a      	ldr	r2, [r3, #4]
 80003c2:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80003c6:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <RCC_PLL_GetFreqDomain_SYS+0x44>)
 80003c8:	bf18      	it	ne
 80003ca:	460a      	movne	r2, r1
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80003cc:	2808      	cmp	r0, #8
 80003ce:	d110      	bne.n	80003f2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80003d0:	6859      	ldr	r1, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80003d2:	6858      	ldr	r0, [r3, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80003d4:	685b      	ldr	r3, [r3, #4]
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80003d6:	f3c3 4301 	ubfx	r3, r3, #16, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80003da:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80003de:	3301      	adds	r3, #1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80003e0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80003ea:	4350      	muls	r0, r2
 80003ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80003f0:	4770      	bx	lr
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80003f2:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40023800 	.word	0x40023800
 80003fc:	007a1200 	.word	0x007a1200
 8000400:	00f42400 	.word	0x00f42400

08000404 <RCC_GetSystemClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <RCC_GetSystemClockFreq+0x1c>)
 8000406:	6898      	ldr	r0, [r3, #8]
 8000408:	f000 000c 	and.w	r0, r0, #12
  switch (LL_RCC_GetSysClkSource())
 800040c:	2804      	cmp	r0, #4
 800040e:	d003      	beq.n	8000418 <RCC_GetSystemClockFreq+0x14>
 8000410:	2808      	cmp	r0, #8
 8000412:	d103      	bne.n	800041c <RCC_GetSystemClockFreq+0x18>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8000414:	f7ff bfd2 	b.w	80003bc <RCC_PLL_GetFreqDomain_SYS>
  switch (LL_RCC_GetSysClkSource())
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <RCC_GetSystemClockFreq+0x20>)
 800041a:	4770      	bx	lr
      frequency = HSI_VALUE;
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <RCC_GetSystemClockFreq+0x24>)
}
 800041e:	4770      	bx	lr
 8000420:	40023800 	.word	0x40023800
 8000424:	007a1200 	.word	0x007a1200
 8000428:	00f42400 	.word	0x00f42400

0800042c <LL_RCC_GetSystemClocksFreq>:
{
 800042c:	b510      	push	{r4, lr}
 800042e:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000430:	f7ff ffe8 	bl	8000404 <RCC_GetSystemClockFreq>
 8000434:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000436:	f7ff ff9d 	bl	8000374 <RCC_GetHCLKClockFreq>
 800043a:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800043c:	f7ff ffa6 	bl	800038c <RCC_GetPCLK1ClockFreq>
 8000440:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000442:	6860      	ldr	r0, [r4, #4]
 8000444:	f7ff ffae 	bl	80003a4 <RCC_GetPCLK2ClockFreq>
 8000448:	60e0      	str	r0, [r4, #12]
}
 800044a:	bd10      	pop	{r4, pc}

0800044c <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <LL_mDelay+0x24>)
{
 800044e:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000454:	9b01      	ldr	r3, [sp, #4]
    Delay++;
  }

  while (Delay)
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <LL_mDelay+0x24>)
  if(Delay < LL_MAX_DELAY)
 8000458:	1c41      	adds	r1, r0, #1
    Delay++;
 800045a:	bf18      	it	ne
 800045c:	3001      	addne	r0, #1
  while (Delay)
 800045e:	b908      	cbnz	r0, 8000464 <LL_mDelay+0x18>
    {
      Delay--;
    }
  }
}
 8000460:	b002      	add	sp, #8
 8000462:	4770      	bx	lr
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	03d2      	lsls	r2, r2, #15
      Delay--;
 8000468:	bf48      	it	mi
 800046a:	f100 30ff 	addmi.w	r0, r0, #4294967295
 800046e:	e7f6      	b.n	800045e <LL_mDelay+0x12>
 8000470:	e000e010 	.word	0xe000e010

08000474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000478:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800047a:	e003      	b.n	8000484 <LoopCopyDataInit>

0800047c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800047e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000480:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000482:	3104      	adds	r1, #4

08000484 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000484:	480b      	ldr	r0, [pc, #44]	; (80004b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000488:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800048a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800048c:	d3f6      	bcc.n	800047c <CopyDataInit>
  ldr  r2, =_sbss
 800048e:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000490:	e002      	b.n	8000498 <LoopFillZerobss>

08000492 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000492:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000494:	f842 3b04 	str.w	r3, [r2], #4

08000498 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000498:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800049a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800049c:	d3f9      	bcc.n	8000492 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800049e:	f7ff fe9b 	bl	80001d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004a2:	f000 fc4d 	bl	8000d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004a6:	f000 fa7f 	bl	80009a8 <main>
  bx  lr    
 80004aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80004b0:	08000dc0 	.word	0x08000dc0
  ldr  r0, =_sdata
 80004b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004b8:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 80004bc:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 80004c0:	20000090 	.word	0x20000090

080004c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004c4:	e7fe      	b.n	80004c4 <ADC_IRQHandler>
	...

080004c8 <LL_AHB1_GRP1_EnableClock>:
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <LL_AHB1_GRP1_EnableClock+0x18>)
 80004ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004cc:	4302      	orrs	r2, r0
 80004ce:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
{
 80004d2:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004d4:	4018      	ands	r0, r3
 80004d6:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 80004d8:	9b01      	ldr	r3, [sp, #4]
}
 80004da:	b002      	add	sp, #8
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40023800 	.word	0x40023800

080004e4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80004e4:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80004e6:	6803      	ldr	r3, [r0, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004e8:	fa91 f4a1 	rbit	r4, r1
 80004ec:	fab4 f484 	clz	r4, r4
 80004f0:	fa91 f1a1 	rbit	r1, r1
 80004f4:	2503      	movs	r5, #3
 80004f6:	fab1 f181 	clz	r1, r1
 80004fa:	0064      	lsls	r4, r4, #1
 80004fc:	fa05 f404 	lsl.w	r4, r5, r4
 8000500:	0049      	lsls	r1, r1, #1
 8000502:	ea23 0304 	bic.w	r3, r3, r4
 8000506:	408a      	lsls	r2, r1
 8000508:	4313      	orrs	r3, r2
 800050a:	6003      	str	r3, [r0, #0]
}
 800050c:	bd30      	pop	{r4, r5, pc}

0800050e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800050e:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000510:	68c3      	ldr	r3, [r0, #12]
 8000512:	fa91 f4a1 	rbit	r4, r1
 8000516:	fab4 f484 	clz	r4, r4
 800051a:	fa91 f1a1 	rbit	r1, r1
 800051e:	2503      	movs	r5, #3
 8000520:	fab1 f181 	clz	r1, r1
 8000524:	0064      	lsls	r4, r4, #1
 8000526:	fa05 f404 	lsl.w	r4, r5, r4
 800052a:	0049      	lsls	r1, r1, #1
 800052c:	ea23 0304 	bic.w	r3, r3, r4
 8000530:	408a      	lsls	r2, r1
 8000532:	4313      	orrs	r3, r2
 8000534:	60c3      	str	r3, [r0, #12]
}
 8000536:	bd30      	pop	{r4, r5, pc}

08000538 <LL_GPIO_SetAFPin_0_7.constprop.0>:
  *         @arg @ref LL_GPIO_AF_13
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
 8000538:	b530      	push	{r4, r5, lr}
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800053a:	4c0a      	ldr	r4, [pc, #40]	; (8000564 <LL_GPIO_SetAFPin_0_7.constprop.0+0x2c>)
 800053c:	6a23      	ldr	r3, [r4, #32]
 800053e:	fa90 f2a0 	rbit	r2, r0
 8000542:	fab2 f282 	clz	r2, r2
 8000546:	fa90 f0a0 	rbit	r0, r0
 800054a:	250f      	movs	r5, #15
 800054c:	fab0 f080 	clz	r0, r0
 8000550:	0092      	lsls	r2, r2, #2
 8000552:	fa05 f202 	lsl.w	r2, r5, r2
 8000556:	0080      	lsls	r0, r0, #2
 8000558:	ea23 0302 	bic.w	r3, r3, r2
 800055c:	4081      	lsls	r1, r0
 800055e:	430b      	orrs	r3, r1
 8000560:	6223      	str	r3, [r4, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	40020400 	.word	0x40020400

08000568 <LL_GPIO_SetPinSpeed.constprop.0>:
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000568:	490b      	ldr	r1, [pc, #44]	; (8000598 <LL_GPIO_SetPinSpeed.constprop.0+0x30>)
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
 800056a:	b510      	push	{r4, lr}
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800056c:	688b      	ldr	r3, [r1, #8]
 800056e:	fa90 f2a0 	rbit	r2, r0
 8000572:	fab2 f282 	clz	r2, r2
 8000576:	fa90 f0a0 	rbit	r0, r0
 800057a:	2403      	movs	r4, #3
 800057c:	0052      	lsls	r2, r2, #1
 800057e:	fa04 f202 	lsl.w	r2, r4, r2
 8000582:	fab0 f080 	clz	r0, r0
 8000586:	ea23 0302 	bic.w	r3, r3, r2
 800058a:	0040      	lsls	r0, r0, #1
 800058c:	2202      	movs	r2, #2
 800058e:	fa02 f000 	lsl.w	r0, r2, r0
 8000592:	4318      	orrs	r0, r3
 8000594:	6088      	str	r0, [r1, #8]
}
 8000596:	bd10      	pop	{r4, pc}
 8000598:	40020400 	.word	0x40020400

0800059c <Activate_I2C_Slave>:
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <Activate_I2C_Slave+0x1c>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	f042 0201 	orr.w	r2, r2, #1
 80005a4:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 80005a6:	685a      	ldr	r2, [r3, #4]
 80005a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005ac:	605a      	str	r2, [r3, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 80005ae:	685a      	ldr	r2, [r3, #4]
 80005b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005b4:	605a      	str	r2, [r3, #4]
   *  - Enable Events interrupts
   *  - Enable Errors interrupts
   */
  LL_I2C_EnableIT_EVT(I2C1);
  LL_I2C_EnableIT_ERR(I2C1);
}
 80005b6:	4770      	bx	lr
 80005b8:	40005400 	.word	0x40005400

080005bc <Activate_I2C_Master>:
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <Activate_I2C_Master+0x1c>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	f042 0201 	orr.w	r2, r2, #1
 80005c4:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 80005c6:	685a      	ldr	r2, [r3, #4]
 80005c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005cc:	605a      	str	r2, [r3, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005d4:	605a      	str	r2, [r3, #4]
   *  - Enable Events interrupts
   *  - Enable Errors interrupts
   */
  LL_I2C_EnableIT_EVT(I2C2);
  LL_I2C_EnableIT_ERR(I2C2);
}
 80005d6:	4770      	bx	lr
 80005d8:	40005800 	.word	0x40005800

080005dc <LED_Init>:
  * @brief  Initialize LED2.
  * @param  None
  * @retval None
  */
void LED_Init(void)
{
 80005dc:	b508      	push	{r3, lr}
  /* Enable the LED2 Clock */
  LED2_GPIO_CLK_ENABLE();
 80005de:	2001      	movs	r0, #1
 80005e0:	f7ff ff72 	bl	80004c8 <LL_AHB1_GRP1_EnableClock>
  //LL_GPIO_SetPinOutputType(LED2_GPIO_PORT, LED2_PIN, LL_GPIO_OUTPUT_PUSHPULL);
  /* Reset value is LL_GPIO_SPEED_FREQ_LOW */
  //LL_GPIO_SetPinSpeed(LED2_GPIO_PORT, LED2_PIN, LL_GPIO_SPEED_FREQ_LOW);
  /* Reset value is LL_GPIO_PULL_NO */
  //LL_GPIO_SetPinPull(LED2_GPIO_PORT, LED2_PIN, LL_GPIO_PULL_NO);
}
 80005e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_GPIO_SetPinMode(LED2_GPIO_PORT, LED2_PIN, LL_GPIO_MODE_OUTPUT);
 80005e8:	4802      	ldr	r0, [pc, #8]	; (80005f4 <LED_Init+0x18>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	2120      	movs	r1, #32
 80005ee:	f7ff bf79 	b.w	80004e4 <LL_GPIO_SetPinMode>
 80005f2:	bf00      	nop
 80005f4:	40020000 	.word	0x40020000

080005f8 <LED_Blinking>:
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005f8:	4c08      	ldr	r4, [pc, #32]	; (800061c <LED_Blinking+0x24>)
  *     @arg LED_BLINK_SLOW : Slow Blinking
  *     @arg LED_BLINK_ERROR : Error specific Blinking
  * @retval None
  */
void LED_Blinking(uint32_t Period)
{
 80005fa:	b508      	push	{r3, lr}
 80005fc:	2320      	movs	r3, #32
 80005fe:	4605      	mov	r5, r0
 8000600:	61a3      	str	r3, [r4, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000602:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000604:	041a      	lsls	r2, r3, #16
 8000606:	43db      	mvns	r3, r3
 8000608:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800060c:	f003 0320 	and.w	r3, r3, #32
 8000610:	4313      	orrs	r3, r2
 8000612:	61a3      	str	r3, [r4, #24]

  /* Toggle IO in an infinite loop */
  while (1)
  {
    LL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);  
    LL_mDelay(Period);
 8000614:	4628      	mov	r0, r5
 8000616:	f7ff ff19 	bl	800044c <LL_mDelay>
  while (1)
 800061a:	e7f2      	b.n	8000602 <LED_Blinking+0xa>
 800061c:	40020000 	.word	0x40020000

08000620 <Configure_I2C_Slave>:
{
 8000620:	b513      	push	{r0, r1, r4, lr}
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 8000622:	4c32      	ldr	r4, [pc, #200]	; (80006ec <Configure_I2C_Slave+0xcc>)
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000624:	2002      	movs	r0, #2
 8000626:	f7ff ff4f 	bl	80004c8 <LL_AHB1_GRP1_EnableClock>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ALTERNATE);
 800062a:	2202      	movs	r2, #2
 800062c:	4620      	mov	r0, r4
 800062e:	2140      	movs	r1, #64	; 0x40
 8000630:	f7ff ff58 	bl	80004e4 <LL_GPIO_SetPinMode>
  LL_GPIO_SetAFPin_0_7(GPIOB, LL_GPIO_PIN_6, LL_GPIO_AF_4);
 8000634:	2104      	movs	r1, #4
 8000636:	2040      	movs	r0, #64	; 0x40
 8000638:	f7ff ff7e 	bl	8000538 <LL_GPIO_SetAFPin_0_7.constprop.0>
  LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_6, LL_GPIO_SPEED_FREQ_HIGH);
 800063c:	2040      	movs	r0, #64	; 0x40
 800063e:	f7ff ff93 	bl	8000568 <LL_GPIO_SetPinSpeed.constprop.0>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000642:	6863      	ldr	r3, [r4, #4]
 8000644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000648:	6063      	str	r3, [r4, #4]
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);
 800064a:	4620      	mov	r0, r4
 800064c:	2201      	movs	r2, #1
 800064e:	2140      	movs	r1, #64	; 0x40
 8000650:	f7ff ff5d 	bl	800050e <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_7, LL_GPIO_MODE_ALTERNATE);
 8000654:	2202      	movs	r2, #2
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	f7ff ff44 	bl	80004e4 <LL_GPIO_SetPinMode>
  LL_GPIO_SetAFPin_0_7(GPIOB, LL_GPIO_PIN_7, LL_GPIO_AF_4);
 800065c:	2104      	movs	r1, #4
 800065e:	2080      	movs	r0, #128	; 0x80
 8000660:	f7ff ff6a 	bl	8000538 <LL_GPIO_SetAFPin_0_7.constprop.0>
  LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_7, LL_GPIO_SPEED_FREQ_HIGH);
 8000664:	2080      	movs	r0, #128	; 0x80
 8000666:	f7ff ff7f 	bl	8000568 <LL_GPIO_SetPinSpeed.constprop.0>
 800066a:	6863      	ldr	r3, [r4, #4]
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6063      	str	r3, [r4, #4]
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_7, LL_GPIO_PULL_UP);
 8000672:	4620      	mov	r0, r4
 8000674:	2201      	movs	r2, #1
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	f7ff ff49 	bl	800050e <LL_GPIO_SetPinPull>
  SET_BIT(RCC->APB1ENR, Periphs);
 800067c:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <Configure_I2C_Slave+0xd0>)
 800067e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000680:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000684:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800068c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800068e:	9b01      	ldr	r3, [sp, #4]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <Configure_I2C_Slave+0xd4>)
 8000692:	2200      	movs	r2, #0
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000694:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000698:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  if (LL_I2C_DeInit(I2C1) != SUCCESS) 
 800069c:	f5a4 34d8 	sub.w	r4, r4, #110592	; 0x1b000
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a0:	6019      	str	r1, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a6:	2201      	movs	r2, #1
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	4620      	mov	r0, r4
 80006ac:	f7ff fdba 	bl	8000224 <LL_I2C_DeInit>
 80006b0:	b118      	cbz	r0, 80006ba <Configure_I2C_Slave+0x9a>
    LED_Blinking(LED_BLINK_ERROR);
 80006b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b6:	f7ff ff9f 	bl	80005f8 <LED_Blinking>
  i2c_initstruct.PeripheralMode  = LL_I2C_MODE_I2C;
 80006ba:	490f      	ldr	r1, [pc, #60]	; (80006f8 <Configure_I2C_Slave+0xd8>)
  i2c_initstruct.ClockSpeed      = I2C_SPEEDCLOCK;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <Configure_I2C_Slave+0xdc>)
  i2c_initstruct.PeripheralMode  = LL_I2C_MODE_I2C;
 80006be:	6008      	str	r0, [r1, #0]
  i2c_initstruct.DutyCycle       = I2C_DUTYCYCLE;
 80006c0:	e9c1 3001 	strd	r3, r0, [r1, #4]
  i2c_initstruct.TypeAcknowledge = LL_I2C_ACK;
 80006c4:	225a      	movs	r2, #90	; 0x5a
 80006c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ca:	e9c1 2305 	strd	r2, r3, [r1, #20]
  if (LL_I2C_Init(I2C1, &i2c_initstruct) != SUCCESS)
 80006ce:	4620      	mov	r0, r4
  i2c_initstruct.OwnAddrSize     = LL_I2C_OWNADDRESS1_7BIT;
 80006d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006d4:	61cb      	str	r3, [r1, #28]
  if (LL_I2C_Init(I2C1, &i2c_initstruct) != SUCCESS)
 80006d6:	f7ff fdd7 	bl	8000288 <LL_I2C_Init>
 80006da:	2800      	cmp	r0, #0
 80006dc:	d1e9      	bne.n	80006b2 <Configure_I2C_Slave+0x92>
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80006de:	6823      	ldr	r3, [r4, #0]
 80006e0:	f023 0301 	bic.w	r3, r3, #1
 80006e4:	6023      	str	r3, [r4, #0]
}
 80006e6:	b002      	add	sp, #8
 80006e8:	bd10      	pop	{r4, pc}
 80006ea:	bf00      	nop
 80006ec:	40020400 	.word	0x40020400
 80006f0:	40023800 	.word	0x40023800
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	20000070 	.word	0x20000070
 80006fc:	00061a80 	.word	0x00061a80

08000700 <Configure_I2C_Master>:
{
 8000700:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_10, LL_GPIO_MODE_ALTERNATE);
 8000702:	4c3a      	ldr	r4, [pc, #232]	; (80007ec <Configure_I2C_Master+0xec>)
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000704:	2002      	movs	r0, #2
 8000706:	f7ff fedf 	bl	80004c8 <LL_AHB1_GRP1_EnableClock>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_10, LL_GPIO_MODE_ALTERNATE);
 800070a:	2202      	movs	r2, #2
 800070c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000710:	4620      	mov	r0, r4
 8000712:	f7ff fee7 	bl	80004e4 <LL_GPIO_SetPinMode>
 8000716:	2504      	movs	r5, #4
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000718:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800071a:	fa95 f1a5 	rbit	r1, r5
 800071e:	fab1 f181 	clz	r1, r1
 8000722:	fa95 f3a5 	rbit	r3, r5
 8000726:	200f      	movs	r0, #15
 8000728:	fab3 f383 	clz	r3, r3
 800072c:	0089      	lsls	r1, r1, #2
 800072e:	fa00 f101 	lsl.w	r1, r0, r1
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	ea22 0201 	bic.w	r2, r2, r1
 8000738:	fa05 f303 	lsl.w	r3, r5, r3
 800073c:	4313      	orrs	r3, r2
 800073e:	6263      	str	r3, [r4, #36]	; 0x24
  LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_10, LL_GPIO_SPEED_FREQ_HIGH);
 8000740:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000744:	f7ff ff10 	bl	8000568 <LL_GPIO_SetPinSpeed.constprop.0>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000748:	6863      	ldr	r3, [r4, #4]
 800074a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800074e:	6063      	str	r3, [r4, #4]
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_10, LL_GPIO_PULL_UP);
 8000750:	4620      	mov	r0, r4
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000758:	f7ff fed9 	bl	800050e <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_ALTERNATE);
 800075c:	2202      	movs	r2, #2
 800075e:	2108      	movs	r1, #8
 8000760:	f7ff fec0 	bl	80004e4 <LL_GPIO_SetPinMode>
  LL_GPIO_SetAFPin_0_7(GPIOB, LL_GPIO_PIN_3, LL_GPIO_AF_9);
 8000764:	2109      	movs	r1, #9
 8000766:	2008      	movs	r0, #8
 8000768:	f7ff fee6 	bl	8000538 <LL_GPIO_SetAFPin_0_7.constprop.0>
  LL_GPIO_SetPinSpeed(GPIOB, LL_GPIO_PIN_3, LL_GPIO_SPEED_FREQ_HIGH);
 800076c:	2008      	movs	r0, #8
 800076e:	f7ff fefb 	bl	8000568 <LL_GPIO_SetPinSpeed.constprop.0>
 8000772:	6863      	ldr	r3, [r4, #4]
 8000774:	f043 0308 	orr.w	r3, r3, #8
 8000778:	6063      	str	r3, [r4, #4]
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_3, LL_GPIO_PULL_UP);
 800077a:	4620      	mov	r0, r4
 800077c:	2201      	movs	r2, #1
 800077e:	2108      	movs	r1, #8
 8000780:	f7ff fec5 	bl	800050e <LL_GPIO_SetPinPull>
  SET_BIT(RCC->APB1ENR, Periphs);
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <Configure_I2C_Master+0xf0>)
 8000786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000788:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800078c:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000794:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000796:	9b01      	ldr	r3, [sp, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <Configure_I2C_Master+0xf4>)
 800079a:	2200      	movs	r2, #0
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079c:	2102      	movs	r1, #2
  if (LL_I2C_DeInit(I2C2) != SUCCESS) 
 800079e:	f5a4 34d6 	sub.w	r4, r4, #109568	; 0x1ac00
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 80007a6:	4620      	mov	r0, r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a8:	6059      	str	r1, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ae:	605d      	str	r5, [r3, #4]
 80007b0:	f7ff fd38 	bl	8000224 <LL_I2C_DeInit>
 80007b4:	b118      	cbz	r0, 80007be <Configure_I2C_Master+0xbe>
    LED_Blinking(LED_BLINK_ERROR);
 80007b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ba:	f7ff ff1d 	bl	80005f8 <LED_Blinking>
  i2c_initstruct.PeripheralMode  = LL_I2C_MODE_I2C;
 80007be:	490e      	ldr	r1, [pc, #56]	; (80007f8 <Configure_I2C_Master+0xf8>)
  i2c_initstruct.ClockSpeed      = I2C_SPEEDCLOCK;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <Configure_I2C_Master+0xfc>)
  i2c_initstruct.PeripheralMode  = LL_I2C_MODE_I2C;
 80007c2:	6008      	str	r0, [r1, #0]
  i2c_initstruct.DutyCycle       = I2C_DUTYCYCLE;
 80007c4:	e9c1 3001 	strd	r3, r0, [r1, #4]
  i2c_initstruct.OwnAddress1     = 0x00;
 80007c8:	6148      	str	r0, [r1, #20]
  i2c_initstruct.OwnAddrSize     = LL_I2C_OWNADDRESS1_7BIT;
 80007ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (LL_I2C_Init(I2C2, &i2c_initstruct) != SUCCESS)
 80007d2:	4620      	mov	r0, r4
  i2c_initstruct.OwnAddrSize     = LL_I2C_OWNADDRESS1_7BIT;
 80007d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
  if (LL_I2C_Init(I2C2, &i2c_initstruct) != SUCCESS)
 80007d8:	f7ff fd56 	bl	8000288 <LL_I2C_Init>
 80007dc:	2800      	cmp	r0, #0
 80007de:	d1ea      	bne.n	80007b6 <Configure_I2C_Master+0xb6>
 80007e0:	6823      	ldr	r3, [r4, #0]
 80007e2:	f023 0301 	bic.w	r3, r3, #1
 80007e6:	6023      	str	r3, [r4, #0]
}
 80007e8:	b003      	add	sp, #12
 80007ea:	bd30      	pop	{r4, r5, pc}
 80007ec:	40020400 	.word	0x40020400
 80007f0:	40023800 	.word	0x40023800
 80007f4:	e000e100 	.word	0xe000e100
 80007f8:	20000070 	.word	0x20000070
 80007fc:	00061a80 	.word	0x00061a80

08000800 <UserButton_Init>:
  * @brief  Configures User push-button in GPIO or EXTI Line Mode.
  * @param  None 
  * @retval None
  */
void UserButton_Init(void)
{
 8000800:	b507      	push	{r0, r1, r2, lr}
  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000802:	2004      	movs	r0, #4
 8000804:	f7ff fe60 	bl	80004c8 <LL_AHB1_GRP1_EnableClock>

  /* Configure GPIO for BUTTON */
  LL_GPIO_SetPinMode(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, LL_GPIO_MODE_INPUT);
 8000808:	481a      	ldr	r0, [pc, #104]	; (8000874 <UserButton_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000810:	f7ff fe68 	bl	80004e4 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinPull(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, LL_GPIO_PULL_NO);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081a:	f7ff fe78 	bl	800050e <LL_GPIO_SetPinPull>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <UserButton_Init+0x78>)
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000820:	4816      	ldr	r0, [pc, #88]	; (800087c <UserButton_Init+0x7c>)
 8000822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000828:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800082a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000830:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000832:	9b01      	ldr	r3, [sp, #4]
 8000834:	6943      	ldr	r3, [r0, #20]
 8000836:	22f0      	movs	r2, #240	; 0xf0
 8000838:	fa92 f2a2 	rbit	r2, r2
 800083c:	2102      	movs	r1, #2
 800083e:	fab2 f282 	clz	r2, r2
 8000842:	fa01 f202 	lsl.w	r2, r1, r2
 8000846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800084a:	4313      	orrs	r3, r2
 800084c:	6143      	str	r3, [r0, #20]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR, ExtiLine);
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <UserButton_Init+0x80>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000856:	601a      	str	r2, [r3, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000858:	68da      	ldr	r2, [r3, #12]
 800085a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <UserButton_Init+0x84>)
 8000862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000866:	605a      	str	r2, [r3, #4]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000868:	2230      	movs	r2, #48	; 0x30
 800086a:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  USER_BUTTON_EXTI_FALLING_TRIG_ENABLE();

  /* Configure NVIC for USER_BUTTON_EXTI_IRQn */
  NVIC_EnableIRQ(USER_BUTTON_EXTI_IRQn); 
  NVIC_SetPriority(USER_BUTTON_EXTI_IRQn,0x03);  
}
 800086e:	b003      	add	sp, #12
 8000870:	f85d fb04 	ldr.w	pc, [sp], #4
 8000874:	40020800 	.word	0x40020800
 8000878:	40023800 	.word	0x40023800
 800087c:	40013800 	.word	0x40013800
 8000880:	40013c00 	.word	0x40013c00
 8000884:	e000e100 	.word	0xe000e100

08000888 <WaitForUserButtonPress>:
  * @param  None 
  * @retval None
  */
  /*  */
void WaitForUserButtonPress(void)
{
 8000888:	b538      	push	{r3, r4, r5, lr}
  while (ubButtonPress == 0)
 800088a:	4d0a      	ldr	r5, [pc, #40]	; (80008b4 <WaitForUserButtonPress+0x2c>)
 800088c:	4c0a      	ldr	r4, [pc, #40]	; (80008b8 <WaitForUserButtonPress+0x30>)
 800088e:	782b      	ldrb	r3, [r5, #0]
 8000890:	b11b      	cbz	r3, 800089a <WaitForUserButtonPress+0x12>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000892:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000896:	61a3      	str	r3, [r4, #24]
    LL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
    LL_mDelay(LED_BLINK_FAST);
  }
  /* Turn LED2 off */
  LL_GPIO_ResetOutputPin(LED2_GPIO_PORT, LED2_PIN);
}
 8000898:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t odr = READ_REG(GPIOx->ODR);
 800089a:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800089c:	041a      	lsls	r2, r3, #16
 800089e:	43db      	mvns	r3, r3
 80008a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80008a4:	f003 0320 	and.w	r3, r3, #32
 80008a8:	4313      	orrs	r3, r2
 80008aa:	61a3      	str	r3, [r4, #24]
    LL_mDelay(LED_BLINK_FAST);
 80008ac:	20c8      	movs	r0, #200	; 0xc8
 80008ae:	f7ff fdcd 	bl	800044c <LL_mDelay>
 80008b2:	e7ec      	b.n	800088e <WaitForUserButtonPress+0x6>
 80008b4:	20000048 	.word	0x20000048
 80008b8:	40020000 	.word	0x40020000

080008bc <Handle_I2C_Slave>:
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80008bc:	4a02      	ldr	r2, [pc, #8]	; (80008c8 <Handle_I2C_Slave+0xc>)
 80008be:	6813      	ldr	r3, [r2, #0]
 80008c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008c4:	6013      	str	r3, [r2, #0]
  */
void Handle_I2C_Slave(void)
{
  /* (1) Prepare acknowledge for Slave address reception **********************/
  LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_ACK);
}
 80008c6:	4770      	bx	lr
 80008c8:	40005400 	.word	0x40005400

080008cc <Handle_I2C_Master>:
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <Handle_I2C_Master+0x14>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80008d4:	601a      	str	r2, [r3, #0]
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008dc:	601a      	str	r2, [r3, #0]
  
  /* (2) Initiate a Start condition to the Slave device ***********************/
  /* Master Generate Start condition */
  LL_I2C_GenerateStartCondition(I2C2);

}
 80008de:	4770      	bx	lr
 80008e0:	40005800 	.word	0x40005800

080008e4 <SystemClock_Config>:
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80008e4:	4b27      	ldr	r3, [pc, #156]	; (8000984 <SystemClock_Config+0xa0>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80008ec:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80008f4:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80008f6:	681a      	ldr	r2, [r3, #0]
void SystemClock_Config(void)
{
  /* Enable HSE oscillator */
  LL_RCC_HSE_EnableBypass();
  LL_RCC_HSE_Enable();
  while(LL_RCC_HSE_IsReady() != 1)
 80008f8:	0390      	lsls	r0, r2, #14
 80008fa:	d5fc      	bpl.n	80008f6 <SystemClock_Config+0x12>
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80008fc:	4922      	ldr	r1, [pc, #136]	; (8000988 <SystemClock_Config+0xa4>)
 80008fe:	680a      	ldr	r2, [r1, #0]
 8000900:	f022 0207 	bic.w	r2, r2, #7
 8000904:	f042 0203 	orr.w	r2, r2, #3
 8000908:	600a      	str	r2, [r1, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	491f      	ldr	r1, [pc, #124]	; (800098c <SystemClock_Config+0xa8>)
 800090e:	4011      	ands	r1, r2
 8000910:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <SystemClock_Config+0xac>)
 8000912:	430a      	orrs	r2, r1
 8000914:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000916:	685a      	ldr	r2, [r3, #4]
 8000918:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800091c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000920:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000928:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <SystemClock_Config+0xa0>)
 800092c:	461a      	mov	r2, r3
 800092e:	6819      	ldr	r1, [r3, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 400, LL_RCC_PLLP_DIV_4);
  LL_RCC_PLL_Enable();
  while(LL_RCC_PLL_IsReady() != 1)
 8000930:	0189      	lsls	r1, r1, #6
 8000932:	d5fc      	bpl.n	800092e <SystemClock_Config+0x4a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000934:	6899      	ldr	r1, [r3, #8]
 8000936:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800093a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800093c:	6899      	ldr	r1, [r3, #8]
 800093e:	f021 0103 	bic.w	r1, r1, #3
 8000942:	f041 0102 	orr.w	r1, r1, #2
 8000946:	6099      	str	r1, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000948:	6893      	ldr	r3, [r2, #8]
 800094a:	f003 030c 	and.w	r3, r3, #12
  };

  /* Sysclk activation on the main PLL */
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800094e:	2b08      	cmp	r3, #8
 8000950:	d1fa      	bne.n	8000948 <SystemClock_Config+0x64>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000952:	6893      	ldr	r3, [r2, #8]
 8000954:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800095c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800095e:	6893      	ldr	r3, [r2, #8]
 8000960:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000964:	6093      	str	r3, [r2, #8]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <SystemClock_Config+0xb0>)
 8000968:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <SystemClock_Config+0xb4>)
 800096a:	605a      	str	r2, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096c:	4a0b      	ldr	r2, [pc, #44]	; (800099c <SystemClock_Config+0xb8>)
 800096e:	21f0      	movs	r1, #240	; 0xf0
 8000970:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000978:	2207      	movs	r2, #7
 800097a:	601a      	str	r2, [r3, #0]

  /* Set systick to 1ms */
  SysTick_Config(100000000 / 1000);

  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  SystemCoreClock = 100000000;
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <SystemClock_Config+0xbc>)
 800097e:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <SystemClock_Config+0xc0>)
 8000980:	601a      	str	r2, [r3, #0]
}
 8000982:	4770      	bx	lr
 8000984:	40023800 	.word	0x40023800
 8000988:	40023c00 	.word	0x40023c00
 800098c:	ffbf8000 	.word	0xffbf8000
 8000990:	00406408 	.word	0x00406408
 8000994:	e000e010 	.word	0xe000e010
 8000998:	0001869f 	.word	0x0001869f
 800099c:	e000ed00 	.word	0xe000ed00
 80009a0:	20000000 	.word	0x20000000
 80009a4:	05f5e100 	.word	0x05f5e100

080009a8 <main>:
{
 80009a8:	b508      	push	{r3, lr}
  SystemClock_Config();
 80009aa:	f7ff ff9b 	bl	80008e4 <SystemClock_Config>
  LED_Init();
 80009ae:	f7ff fe15 	bl	80005dc <LED_Init>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <main+0x34>)
 80009b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80009b8:	619a      	str	r2, [r3, #24]
  UserButton_Init();
 80009ba:	f7ff ff21 	bl	8000800 <UserButton_Init>
  Configure_I2C_Slave();
 80009be:	f7ff fe2f 	bl	8000620 <Configure_I2C_Slave>
  Configure_I2C_Master();
 80009c2:	f7ff fe9d 	bl	8000700 <Configure_I2C_Master>
  Activate_I2C_Slave();
 80009c6:	f7ff fde9 	bl	800059c <Activate_I2C_Slave>
  Activate_I2C_Master();
 80009ca:	f7ff fdf7 	bl	80005bc <Activate_I2C_Master>
  WaitForUserButtonPress();
 80009ce:	f7ff ff5b 	bl	8000888 <WaitForUserButtonPress>
  Handle_I2C_Slave();
 80009d2:	f7ff ff73 	bl	80008bc <Handle_I2C_Slave>
  Handle_I2C_Master();
 80009d6:	f7ff ff79 	bl	80008cc <Handle_I2C_Master>
  while (1)
 80009da:	e7fe      	b.n	80009da <main+0x32>
 80009dc:	40020000 	.word	0x40020000

080009e0 <UserButton_Callback>:
  * @retval None
  */
void UserButton_Callback(void)
{
  /* Update User push-button variable : to be checked in waiting loop in main program */
  ubButtonPress = 1;
 80009e0:	4b01      	ldr	r3, [pc, #4]	; (80009e8 <UserButton_Callback+0x8>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
}
 80009e6:	4770      	bx	lr
 80009e8:	20000048 	.word	0x20000048

080009ec <Slave_Ready_To_Transmit_Callback>:
  * @retval None
  */
void Slave_Ready_To_Transmit_Callback(void)
{
  /* Update ubNbDataToTransmit variable */
  ubNbDataToTransmit--;  
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <Slave_Ready_To_Transmit_Callback+0x2c>)
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	3a01      	subs	r2, #1
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	701a      	strb	r2, [r3, #0]

  if(ubNbDataToTransmit == 0)
 80009f6:	7819      	ldrb	r1, [r3, #0]
 80009f8:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <Slave_Ready_To_Transmit_Callback+0x30>)
 80009fa:	b919      	cbnz	r1, 8000a04 <Slave_Ready_To_Transmit_Callback+0x18>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 80009fc:	6851      	ldr	r1, [r2, #4]
 80009fe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8000a02:	6051      	str	r1, [r2, #4]
    /* Disable Buffer Interrupts */
    LL_I2C_DisableIT_BUF(I2C1);
  }
  
  /* Send the Byte requested by the Master */
  LL_I2C_TransmitData8(I2C1, SLAVE_BYTE_TO_SEND[35 - ubNbDataToTransmit]);
 8000a04:	7818      	ldrb	r0, [r3, #0]
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8000a06:	6911      	ldr	r1, [r2, #16]
 8000a08:	1a1b      	subs	r3, r3, r0
 8000a0a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a12:	430b      	orrs	r3, r1
 8000a14:	6113      	str	r3, [r2, #16]
}
 8000a16:	4770      	bx	lr
 8000a18:	20000004 	.word	0x20000004
 8000a1c:	40005400 	.word	0x40005400

08000a20 <Slave_Complete_Callback>:
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <Slave_Complete_Callback+0x14>)
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 8000a2a:	685a      	ldr	r2, [r3, #4]
 8000a2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a30:	605a      	str	r2, [r3, #4]
   *  - Disable Events Interrupt
   *  - Disable Error interrupts
   */
  LL_I2C_DisableIT_EVT(I2C1);
  LL_I2C_DisableIT_ERR(I2C1);
}
 8000a32:	4770      	bx	lr
 8000a34:	40005400 	.word	0x40005400

08000a38 <Error_Callback>:
  * @brief  Function called in case of error detected in I2C IT Handler
  * @param  None
  * @retval None
  */
void Error_Callback(void)
{
 8000a38:	b508      	push	{r3, lr}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <Error_Callback+0x48>)
 8000a3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 8000a44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a48:	f3bf 8f6f 	isb	sy
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a56:	f3bf 8f6f 	isb	sy
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a64:	f3bf 8f6f 	isb	sy
 8000a68:	2204      	movs	r2, #4
 8000a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a72:	f3bf 8f6f 	isb	sy
  /* Disable I2C1_ER_IRQn and I2C2_ER_IRQn */
  NVIC_DisableIRQ(I2C1_ER_IRQn);
  NVIC_DisableIRQ(I2C2_ER_IRQn);

  /* Unexpected event : Set LED2 to Blinking mode to indicate error occurs */
  LED_Blinking(LED_BLINK_ERROR);
 8000a76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a7a:	f7ff fdbd 	bl	80005f8 <LED_Blinking>
 8000a7e:	bf00      	nop
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <Master_Complete_Callback>:
{
 8000a84:	b538      	push	{r3, r4, r5, lr}
  if(ubNbDataToReceive == 3)
 8000a86:	4b36      	ldr	r3, [pc, #216]	; (8000b60 <Master_Complete_Callback+0xdc>)
 8000a88:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000a8c:	2a03      	cmp	r2, #3
 8000a8e:	d12d      	bne.n	8000aec <Master_Complete_Callback+0x68>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8000a90:	4a34      	ldr	r2, [pc, #208]	; (8000b64 <Master_Complete_Callback+0xe0>)
    aReceiveBuffer[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C2);
 8000a92:	4c35      	ldr	r4, [pc, #212]	; (8000b68 <Master_Complete_Callback+0xe4>)
 8000a94:	6811      	ldr	r1, [r2, #0]
 8000a96:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8000a9a:	6011      	str	r1, [r2, #0]
 8000a9c:	7860      	ldrb	r0, [r4, #1]
 8000a9e:	1c41      	adds	r1, r0, #1
 8000aa0:	b2c9      	uxtb	r1, r1
 8000aa2:	7061      	strb	r1, [r4, #1]
 8000aa4:	4931      	ldr	r1, [pc, #196]	; (8000b6c <Master_Complete_Callback+0xe8>)
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8000aa6:	6914      	ldr	r4, [r2, #16]
 8000aa8:	540c      	strb	r4, [r1, r0]
    ubNbDataToReceive--;
 8000aaa:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 8000aae:	3901      	subs	r1, #1
 8000ab0:	b2c9      	uxtb	r1, r1
 8000ab2:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 8000ab6:	6851      	ldr	r1, [r2, #4]
 8000ab8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8000abc:	6051      	str	r1, [r2, #4]
  if(ubNbDataToReceive == 0)
 8000abe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ac2:	b993      	cbnz	r3, 8000aea <Master_Complete_Callback+0x66>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <Master_Complete_Callback+0xe0>)
 8000ac6:	4929      	ldr	r1, [pc, #164]	; (8000b6c <Master_Complete_Callback+0xe8>)
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ace:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ad6:	605a      	str	r2, [r3, #4]
}

static uint16_t aCompareBuffer(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
 8000ad8:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <Master_Complete_Callback+0xec>)
 8000ada:	2324      	movs	r3, #36	; 0x24
{
  while (BufferLength--)
 8000adc:	3b01      	subs	r3, #1
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d135      	bne.n	8000b50 <Master_Complete_Callback+0xcc>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ae4:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <Master_Complete_Callback+0xf0>)
 8000ae6:	2220      	movs	r2, #32
 8000ae8:	619a      	str	r2, [r3, #24]
}
 8000aea:	bd38      	pop	{r3, r4, r5, pc}
  else if(ubNbDataToReceive == 2)
 8000aec:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000af0:	2a02      	cmp	r2, #2
 8000af2:	d11f      	bne.n	8000b34 <Master_Complete_Callback+0xb0>
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8000af4:	491b      	ldr	r1, [pc, #108]	; (8000b64 <Master_Complete_Callback+0xe0>)
    aReceiveBuffer[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C2);
 8000af6:	481c      	ldr	r0, [pc, #112]	; (8000b68 <Master_Complete_Callback+0xe4>)
 8000af8:	680a      	ldr	r2, [r1, #0]
 8000afa:	4d1c      	ldr	r5, [pc, #112]	; (8000b6c <Master_Complete_Callback+0xe8>)
 8000afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b00:	600a      	str	r2, [r1, #0]
 8000b02:	7844      	ldrb	r4, [r0, #1]
 8000b04:	1c62      	adds	r2, r4, #1
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	7042      	strb	r2, [r0, #1]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8000b0a:	690a      	ldr	r2, [r1, #16]
 8000b0c:	552a      	strb	r2, [r5, r4]
    ubNbDataToReceive--;
 8000b0e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000b12:	3a01      	subs	r2, #1
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    aReceiveBuffer[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C2);
 8000b1a:	7844      	ldrb	r4, [r0, #1]
 8000b1c:	1c62      	adds	r2, r4, #1
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	7042      	strb	r2, [r0, #1]
 8000b22:	690a      	ldr	r2, [r1, #16]
 8000b24:	552a      	strb	r2, [r5, r4]
      ubNbDataToReceive--;
 8000b26:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000b2a:	3a01      	subs	r2, #1
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8000b32:	e7c4      	b.n	8000abe <Master_Complete_Callback+0x3a>
    if(ubNbDataToReceive > 0)
 8000b34:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	d0c0      	beq.n	8000abe <Master_Complete_Callback+0x3a>
      aReceiveBuffer[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C2);
 8000b3c:	480a      	ldr	r0, [pc, #40]	; (8000b68 <Master_Complete_Callback+0xe4>)
 8000b3e:	7841      	ldrb	r1, [r0, #1]
 8000b40:	1c4a      	adds	r2, r1, #1
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	7042      	strb	r2, [r0, #1]
 8000b46:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <Master_Complete_Callback+0xe0>)
 8000b48:	6910      	ldr	r0, [r2, #16]
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <Master_Complete_Callback+0xe8>)
 8000b4c:	5450      	strb	r0, [r2, r1]
 8000b4e:	e7ea      	b.n	8000b26 <Master_Complete_Callback+0xa2>
  {
    if ((*pBuffer1) != *pBuffer2)
 8000b50:	f812 4b01 	ldrb.w	r4, [r2], #1
 8000b54:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000b58:	4284      	cmp	r4, r0
 8000b5a:	d0bf      	beq.n	8000adc <Master_Complete_Callback+0x58>
      Error_Callback();
 8000b5c:	f7ff ff6c 	bl	8000a38 <Error_Callback>
 8000b60:	20000004 	.word	0x20000004
 8000b64:	40005800 	.word	0x40005800
 8000b68:	20000048 	.word	0x20000048
 8000b6c:	2000004c 	.word	0x2000004c
 8000b70:	20000005 	.word	0x20000005
 8000b74:	40020000 	.word	0x40020000

08000b78 <Master_Reception_Callback>:
{
 8000b78:	b410      	push	{r4}
  if(ubNbDataToReceive > 3)
 8000b7a:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <Master_Reception_Callback+0x8c>)
 8000b7c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000b80:	2a03      	cmp	r2, #3
 8000b82:	d911      	bls.n	8000ba8 <Master_Reception_Callback+0x30>
    aReceiveBuffer[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C2);
 8000b84:	4820      	ldr	r0, [pc, #128]	; (8000c08 <Master_Reception_Callback+0x90>)
 8000b86:	7841      	ldrb	r1, [r0, #1]
 8000b88:	1c4a      	adds	r2, r1, #1
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	7042      	strb	r2, [r0, #1]
 8000b8e:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <Master_Reception_Callback+0x94>)
 8000b90:	6910      	ldr	r0, [r2, #16]
 8000b92:	4a1f      	ldr	r2, [pc, #124]	; (8000c10 <Master_Reception_Callback+0x98>)
 8000b94:	5450      	strb	r0, [r2, r1]
    ubNbDataToReceive--;
 8000b96:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000b9a:	3a01      	subs	r2, #1
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8000ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ba6:	4770      	bx	lr
  else if((ubNbDataToReceive == 2) || (ubNbDataToReceive == 3))
 8000ba8:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000bac:	2a02      	cmp	r2, #2
 8000bae:	d003      	beq.n	8000bb8 <Master_Reception_Callback+0x40>
 8000bb0:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000bb4:	2a03      	cmp	r2, #3
 8000bb6:	d105      	bne.n	8000bc4 <Master_Reception_Callback+0x4c>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <Master_Reception_Callback+0x94>)
 8000bba:	6853      	ldr	r3, [r2, #4]
 8000bbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bc0:	6053      	str	r3, [r2, #4]
}
 8000bc2:	e7ee      	b.n	8000ba2 <Master_Reception_Callback+0x2a>
  else if(ubNbDataToReceive == 1)
 8000bc4:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000bc8:	2a01      	cmp	r2, #1
 8000bca:	d1ea      	bne.n	8000ba2 <Master_Reception_Callback+0x2a>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 8000bcc:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <Master_Reception_Callback+0x94>)
    aReceiveBuffer[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C2);
 8000bce:	4c0e      	ldr	r4, [pc, #56]	; (8000c08 <Master_Reception_Callback+0x90>)
 8000bd0:	6851      	ldr	r1, [r2, #4]
 8000bd2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8000bd6:	6051      	str	r1, [r2, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8000bd8:	6811      	ldr	r1, [r2, #0]
 8000bda:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8000bde:	6011      	str	r1, [r2, #0]
 8000be0:	7860      	ldrb	r0, [r4, #1]
 8000be2:	1c41      	adds	r1, r0, #1
 8000be4:	b2c9      	uxtb	r1, r1
 8000be6:	7061      	strb	r1, [r4, #1]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8000be8:	6911      	ldr	r1, [r2, #16]
 8000bea:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <Master_Reception_Callback+0x98>)
 8000bec:	5411      	strb	r1, [r2, r0]
    ubNbDataToReceive--;
 8000bee:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000bf2:	3a01      	subs	r2, #1
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8000bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
    Master_Complete_Callback();
 8000bfe:	f7ff bf41 	b.w	8000a84 <Master_Complete_Callback>
 8000c02:	bf00      	nop
 8000c04:	20000004 	.word	0x20000004
 8000c08:	20000048 	.word	0x20000048
 8000c0c:	40005800 	.word	0x40005800
 8000c10:	2000004c 	.word	0x2000004c

08000c14 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000c14:	4770      	bx	lr

08000c16 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <HardFault_Handler>

08000c18 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler>

08000c1a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler>

08000c1c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler>

08000c1e <SVC_Handler>:
 8000c1e:	4770      	bx	lr

08000c20 <DebugMon_Handler>:
 8000c20:	4770      	bx	lr

08000c22 <PendSV_Handler>:
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Handler>:
 8000c24:	4770      	bx	lr
	...

08000c28 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <EXTI15_10_IRQHandler+0x14>)
 8000c2a:	695a      	ldr	r2, [r3, #20]
  * @retval None
  */
void USER_BUTTON_IRQHANDLER(void)
{
  /* Manage Flags */
  if(LL_EXTI_IsActiveFlag_0_31(USER_BUTTON_EXTI_LINE) != RESET)
 8000c2c:	0492      	lsls	r2, r2, #18
 8000c2e:	d504      	bpl.n	8000c3a <EXTI15_10_IRQHandler+0x12>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8000c30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c34:	615a      	str	r2, [r3, #20]
  {
    LL_EXTI_ClearFlag_0_31(USER_BUTTON_EXTI_LINE);

    /* Manage code in main.c.*/
    UserButton_Callback(); 
 8000c36:	f7ff bed3 	b.w	80009e0 <UserButton_Callback>
  }
}
 8000c3a:	4770      	bx	lr
 8000c3c:	40013c00 	.word	0x40013c00

08000c40 <I2C1_EV_IRQHandler>:
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <I2C1_EV_IRQHandler+0x50>)
 8000c42:	695a      	ldr	r2, [r3, #20]
  * Retval  None
  */
void I2C1_EV_IRQHandler(void)
{
  /* Check ADDR flag value in ISR register */
  if(LL_I2C_IsActiveFlag_ADDR(I2C1))
 8000c44:	0790      	lsls	r0, r2, #30
{
 8000c46:	b082      	sub	sp, #8
  if(LL_I2C_IsActiveFlag_ADDR(I2C1))
 8000c48:	d517      	bpl.n	8000c7a <I2C1_EV_IRQHandler+0x3a>
  return (uint32_t)(READ_BIT(I2Cx->SR2, I2C_SR2_TRA));
 8000c4a:	699a      	ldr	r2, [r3, #24]
  {
    /* Verify the slave transfer direction, a write direction, Slave enters transmitter mode */
    if(LL_I2C_GetTransferDirection(I2C1) == LL_I2C_DIRECTION_WRITE)
 8000c4c:	0751      	lsls	r1, r2, #29
 8000c4e:	d50b      	bpl.n	8000c68 <I2C1_EV_IRQHandler+0x28>
  SET_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c56:	605a      	str	r2, [r3, #4]
  tmpreg = I2Cx->SR1;
 8000c58:	695a      	ldr	r2, [r3, #20]
 8000c5a:	9200      	str	r2, [sp, #0]
  (void) tmpreg;
 8000c5c:	9a00      	ldr	r2, [sp, #0]
  tmpreg = I2Cx->SR2;
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	9300      	str	r3, [sp, #0]
  (void) tmpreg;
 8000c62:	9b00      	ldr	r3, [sp, #0]
  {
    /* Send the next byte */
    /* Call function Slave Ready to Transmit Callback */
    Slave_Ready_To_Transmit_Callback();
  }
}
 8000c64:	b002      	add	sp, #8
 8000c66:	4770      	bx	lr
  tmpreg = I2Cx->SR1;
 8000c68:	695a      	ldr	r2, [r3, #20]
 8000c6a:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8000c6c:	9a01      	ldr	r2, [sp, #4]
  tmpreg = I2Cx->SR2;
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8000c72:	9b01      	ldr	r3, [sp, #4]
 8000c74:	b002      	add	sp, #8
      Error_Callback();
 8000c76:	f7ff bedf 	b.w	8000a38 <Error_Callback>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8000c7a:	695a      	ldr	r2, [r3, #20]
  else if(LL_I2C_IsActiveFlag_TXE(I2C1))
 8000c7c:	0612      	lsls	r2, r2, #24
 8000c7e:	d502      	bpl.n	8000c86 <I2C1_EV_IRQHandler+0x46>
}
 8000c80:	b002      	add	sp, #8
    Slave_Ready_To_Transmit_Callback();
 8000c82:	f7ff beb3 	b.w	80009ec <Slave_Ready_To_Transmit_Callback>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8000c86:	695b      	ldr	r3, [r3, #20]
  else if(LL_I2C_IsActiveFlag_BTF(I2C1))
 8000c88:	075b      	lsls	r3, r3, #29
 8000c8a:	d4f9      	bmi.n	8000c80 <I2C1_EV_IRQHandler+0x40>
 8000c8c:	e7ea      	b.n	8000c64 <I2C1_EV_IRQHandler+0x24>
 8000c8e:	bf00      	nop
 8000c90:	40005400 	.word	0x40005400

08000c94 <I2C1_ER_IRQHandler>:
  */
void I2C1_ER_IRQHandler(void)
{
  /* Normal use case, if all bytes are sent and Acknowledge failure appears */
  /* This correspond to the end of communication */
  if((ubNbDataToTransmit == 0) && (LL_I2C_IsActiveFlag_AF(I2C1)))
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <I2C1_ER_IRQHandler+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b94b      	cbnz	r3, 8000cae <I2C1_ER_IRQHandler+0x1a>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_AF) == (I2C_SR1_AF));
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <I2C1_ER_IRQHandler+0x24>)
 8000c9c:	695a      	ldr	r2, [r3, #20]
 8000c9e:	0552      	lsls	r2, r2, #21
 8000ca0:	d505      	bpl.n	8000cae <I2C1_ER_IRQHandler+0x1a>
  CLEAR_BIT(I2Cx->SR1, I2C_SR1_AF);
 8000ca2:	695a      	ldr	r2, [r3, #20]
 8000ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ca8:	615a      	str	r2, [r3, #20]
  {
    /* Clear AF flag value in ISR register */
    LL_I2C_ClearFlag_AF(I2C1);

    /* Call function Slave Complete Callback */
    Slave_Complete_Callback();
 8000caa:	f7ff beb9 	b.w	8000a20 <Slave_Complete_Callback>
  }
  else
  {
    /* Call Error function */
    Error_Callback();
 8000cae:	f7ff bec3 	b.w	8000a38 <Error_Callback>
 8000cb2:	bf00      	nop
 8000cb4:	20000004 	.word	0x20000004
 8000cb8:	40005400 	.word	0x40005400

08000cbc <I2C2_EV_IRQHandler>:
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8000cbc:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <I2C2_EV_IRQHandler+0x78>)
 8000cbe:	695a      	ldr	r2, [r3, #20]
  * Retval  None
  */
void I2C2_EV_IRQHandler(void)
{
  /* Check SB flag value in ISR register */
  if(LL_I2C_IsActiveFlag_SB(I2C2))
 8000cc0:	07d0      	lsls	r0, r2, #31
{
 8000cc2:	b082      	sub	sp, #8
  if(LL_I2C_IsActiveFlag_SB(I2C2))
 8000cc4:	d507      	bpl.n	8000cd6 <I2C2_EV_IRQHandler+0x1a>
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8000cc6:	691a      	ldr	r2, [r3, #16]
 8000cc8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000ccc:	f042 025b 	orr.w	r2, r2, #91	; 0x5b
 8000cd0:	611a      	str	r2, [r3, #16]
  else if(LL_I2C_IsActiveFlag_RXNE(I2C2))
  {
    /* Call function Master Reception Callback */
    Master_Reception_Callback();
  }
}
 8000cd2:	b002      	add	sp, #8
 8000cd4:	4770      	bx	lr
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8000cd6:	695a      	ldr	r2, [r3, #20]
  else if(LL_I2C_IsActiveFlag_ADDR(I2C2))
 8000cd8:	0791      	lsls	r1, r2, #30
 8000cda:	d51f      	bpl.n	8000d1c <I2C2_EV_IRQHandler+0x60>
    if(ubNbDataToReceive == 1)
 8000cdc:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <I2C2_EV_IRQHandler+0x7c>)
 8000cde:	7811      	ldrb	r1, [r2, #0]
 8000ce0:	2901      	cmp	r1, #1
 8000ce2:	d108      	bne.n	8000cf6 <I2C2_EV_IRQHandler+0x3a>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cea:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITBUFEN);
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cf2:	605a      	str	r2, [r3, #4]
}
 8000cf4:	e00a      	b.n	8000d0c <I2C2_EV_IRQHandler+0x50>
    else if(ubNbDataToReceive == 2)
 8000cf6:	7812      	ldrb	r2, [r2, #0]
 8000cf8:	2a02      	cmp	r2, #2
 8000cfa:	d1f7      	bne.n	8000cec <I2C2_EV_IRQHandler+0x30>
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d02:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_POS);
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d0a:	601a      	str	r2, [r3, #0]
  tmpreg = I2Cx->SR1;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <I2C2_EV_IRQHandler+0x78>)
 8000d0e:	695a      	ldr	r2, [r3, #20]
 8000d10:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8000d12:	9a01      	ldr	r2, [sp, #4]
  tmpreg = I2Cx->SR2;
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8000d18:	9b01      	ldr	r3, [sp, #4]
}
 8000d1a:	e7da      	b.n	8000cd2 <I2C2_EV_IRQHandler+0x16>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8000d1c:	695a      	ldr	r2, [r3, #20]
  else if(LL_I2C_IsActiveFlag_BTF(I2C2))
 8000d1e:	0752      	lsls	r2, r2, #29
 8000d20:	d502      	bpl.n	8000d28 <I2C2_EV_IRQHandler+0x6c>
}
 8000d22:	b002      	add	sp, #8
    Master_Complete_Callback();
 8000d24:	f7ff beae 	b.w	8000a84 <Master_Complete_Callback>
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8000d28:	695b      	ldr	r3, [r3, #20]
  else if(LL_I2C_IsActiveFlag_RXNE(I2C2))
 8000d2a:	065b      	lsls	r3, r3, #25
 8000d2c:	d5d1      	bpl.n	8000cd2 <I2C2_EV_IRQHandler+0x16>
}
 8000d2e:	b002      	add	sp, #8
    Master_Reception_Callback();
 8000d30:	f7ff bf22 	b.w	8000b78 <Master_Reception_Callback>
 8000d34:	40005800 	.word	0x40005800
 8000d38:	20000029 	.word	0x20000029

08000d3c <I2C2_ER_IRQHandler>:
  * Retval  None
  */
void I2C2_ER_IRQHandler(void)
{
  /* Call Error function */
  Error_Callback();
 8000d3c:	f7ff be7c 	b.w	8000a38 <Error_Callback>

08000d40 <__libc_init_array>:
 8000d40:	b570      	push	{r4, r5, r6, lr}
 8000d42:	4d0d      	ldr	r5, [pc, #52]	; (8000d78 <__libc_init_array+0x38>)
 8000d44:	4c0d      	ldr	r4, [pc, #52]	; (8000d7c <__libc_init_array+0x3c>)
 8000d46:	1b64      	subs	r4, r4, r5
 8000d48:	10a4      	asrs	r4, r4, #2
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	42a6      	cmp	r6, r4
 8000d4e:	d109      	bne.n	8000d64 <__libc_init_array+0x24>
 8000d50:	4d0b      	ldr	r5, [pc, #44]	; (8000d80 <__libc_init_array+0x40>)
 8000d52:	4c0c      	ldr	r4, [pc, #48]	; (8000d84 <__libc_init_array+0x44>)
 8000d54:	f000 f818 	bl	8000d88 <_init>
 8000d58:	1b64      	subs	r4, r4, r5
 8000d5a:	10a4      	asrs	r4, r4, #2
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	42a6      	cmp	r6, r4
 8000d60:	d105      	bne.n	8000d6e <__libc_init_array+0x2e>
 8000d62:	bd70      	pop	{r4, r5, r6, pc}
 8000d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d68:	4798      	blx	r3
 8000d6a:	3601      	adds	r6, #1
 8000d6c:	e7ee      	b.n	8000d4c <__libc_init_array+0xc>
 8000d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d72:	4798      	blx	r3
 8000d74:	3601      	adds	r6, #1
 8000d76:	e7f2      	b.n	8000d5e <__libc_init_array+0x1e>
 8000d78:	08000db8 	.word	0x08000db8
 8000d7c:	08000db8 	.word	0x08000db8
 8000d80:	08000db8 	.word	0x08000db8
 8000d84:	08000dbc 	.word	0x08000dbc

08000d88 <_init>:
 8000d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8a:	bf00      	nop
 8000d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d8e:	bc08      	pop	{r3}
 8000d90:	469e      	mov	lr, r3
 8000d92:	4770      	bx	lr

08000d94 <_fini>:
 8000d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d96:	bf00      	nop
 8000d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d9a:	bc08      	pop	{r3}
 8000d9c:	469e      	mov	lr, r3
 8000d9e:	4770      	bx	lr
